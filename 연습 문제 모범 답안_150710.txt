Copyright 2014. 이시환 & 올댓미디어 all rights reserved.

<1장>

1.
1) 웹 사이트(web site)는 하나의 도메인 이름으로 서비스되는 웹 페이지(web page)들의 묶음으로서 웹 서버(web server)에서 관리된다.
2) 웹 서버(web server)는 웹 사이트를 사용자에게 서비스해주는 서버 프로그램이다.
3) 웹 페이지(web page)는 웹 사이트에 포함되어 있는 개개의 웹 문서이다.
4) 웹 브라우저(web browser)는 사용자가 웹 페이지를 요청 할 때 사용하는 클라이언트 프로그램이다.
5) 정적 웹 페이지는 웹 브라우저로 전달되는 웹 페이지의 내용이 이미 정해져 있어 그 내용이 변하지 않는 웹 페이지를 말한다.
6) 동적 웹 페이지는 웹 브라우저로 전달되는 웹 페이지의 내용이 상황에 따라 동적으로 변하는 웹 페이지를 말한다.
7) 웹 응용 프로그램(web application)은 웹을 통해 클라이언트에서 이용할 수 있는 응용 프로그램을 말한다.
8) ASP.NET은 웹 응용 프로그램 개발 프레임워크이다.
9) 프레임워크(framework)는 소프트웨어 개발 시 뼈대가 되는(근간이 되는) 소프트웨어를 말한다.
10) .NET은 XML 웹 서비스를 통해 이기종 간의 시스템을 통합하기 위한 플랫폼(환경)이다.
11) .NET Framework는 XML 웹 서비스와 다양한 종류의 응용 프로그램을 개발, 구축 및 실행할 수 있도록 해주는 프레임워크로서 .NET 플랫폼을 구축하는 데 있어 핵심이 되는 요소이다.

2.
ASP.NET Web Forms, ASP.NET MVC, ASP.NET Web Pages

3.
1) .NET 언어
2) 웹 폼(Web Form), 웹 폼(Web Forms) 방식
3) 서버 컨트롤
4) 마스터 페이지
5) 사이트 탐색
6) CSS
7) 테마
8) 인증, 권한 부여



<2장>

1.
1) 개발 환경은 프로그램을 개발하기 위한 환경으로서 코딩, 디버그, 컴파일, 테스트 등과 같이 개발과 관련된 모든 작업을 할 수 있는 환경을 의미한다.
2) 마이크로소프트의 IIS(Internet Information Services, 인터넷 정보 서비스)는 사용자에게 웹 사이트를 서비스해주는 웹 서버로서 다양한 인터넷 기반 서비스들을 포함하고 있다.
3) IDE(Integrated Development Environment, 통합 개발 환경)는 코딩, 디버그, 컴파일, 테스트 등 프로그램 개발과 관련된 모든 작업을 할 수 있는 통합 개발 환경을 제공하는 소프트웨어를 말한다.
4) Visual Studio는 다양한 종류의 .NET 응용 프로그램(웹, 데스크톱, 모바일 등)을 개발할 수 있도록 해주는 IDE 개발 도구로서 통합 개발 환경을 제공한다.
5) Visual Studio Express for Web은 Visual Studio의 하위 제품군으로서 .NET 응용 프로그램 중 특히 웹 응용 프로그램만 개발할 수 있도록 기능상의 제약을 걸어둔 IDE 개발 도구이다.
6) 웹 플랫폼 설치 관리자(Web Platform Installer)는 웹 개발과 실행에 필요한 최신 소프트웨어들을 손쉽게 다운로드 받아 설치할 수 있도록 해주는 마이크로소프트의 무료 설치 관리 프로그램이다.

2.
.NET Framework 4.5.1



<3장>

1.
1) 네임스페이스(namespace)는 프로그램에서 사용되는 각각의 기능들을 구분하여 관리할 목적으로 나눠놓은 영역 또는 공간을 의미하며 동일한 이름을 가진 기능들이 서로 충돌하지 않도록 영역을 나눠서 조직화 해주는 역할을 한다.
2) 키워드(keyword)는 C#에 미리 정의되어 있는 단어들로서 예약어라고도 한다.
3) 주석(comment)은 설명글로서 소스 코드 실행에 영향을 주지 않고 단순히 소스 코드를 설명하는 역할을 한다. 주석에는 한 줄 주석(//)과 여러 줄 주석(/* */)이 있다.
4) 개체 지향 프로그래밍(Object Oriented Programming)은 실세계의 현상을 컴퓨터 프로그램에서 개체로 표현하여 크고 복잡한 프로그램을 효율적으로 구현할 수 있도록 해주는 프로그래밍 기법이다.
5) 클래스(class)는 개체를 추상화할 때 사용하는 개체의 설계도이다.
6) 개체(object)는 구현하려는 프로그램에서 중심 역할을 하는 각각의 독립된 구성 요소로서 클래스를 통해 모델링(추상화)된다.
7) 생성자(constructor)는 개체를 생성할 때 사용하는 멤버 메서드로서 개체 생성 시 단 한번 실행되며 클래스 이름과 동일한 이름을 가진다.
8) 메서드(method)는 클래스 내에 정의되는 코드의 묶음으로서 만들어질 개체의 행동양식을 표현한다.
9) 속성(property)은 멤버 변수의 접근 방식을 제어할 때 사용하는 클래스 멤버로서 get 접근자를 통해 읽기 설정을 하고 set 접근자를 통해 쓰기 설정을 한다.
10) 개체를 생성하지 않아도 독립적으로 존재할 수 있는 클래스 멤버를 정적 멤버(static member)라고 하는데 정적 멤버를 정의할 때에는 static 키워드를 사용한다.
11) 암시적 변환(implicit conversion)은 개발자의 추가적인 코딩 작업 없이 컴파일러가 알아서 형식 변환을 해주는 것을 말한다.
12) 명시적 변환(explicit conversion)은 암시적 변환이 허용되지 않을 경우 캐스트 연산자를 사용하여 형식 변환을 하는 것을 말한다.
13) 예외로 인해 프로그램이 작동을 멈추지 않도록 예외를 적절하게 처리하는 것을 '예외 처리(exception handling)'라고 한다. 예외 처리는 try-catch 문을 통해 이루어진다.

2.
내장 데이터 형식은 C#에서 기본적으로 제공해주는(내장 되어 있는) 데이터 형식이고, 사용자 정의 데이터 형식은 개발자가 임의로 정의하는 데이터 형식이다. 값 형식은 데이터가 스택(stack) 메모리 영역에 저장되는 데이터 형식이고, 참조 형식은 데이터가 힙(heap) 메모리 영역에 저장되는 데이터 형식이다.

3.
2) 변수의 이름은 숫자로 시작할 수 없다.
4) 변수의 이름은 *와 같은 특수 문자를 포함할 수 없다.
5) double은 키워드이다. 키워드는 변수의 이름으로 사용될 수 없다.

4.
a = 10, b = 21, c = 630

5.
for (int i = 1; i <= 50; i++)
{
    if (i % 2 == 1)
        Console.WriteLine(i);
}

6.
인덱스가 배열의 범위를 벗어났다. 배열의 인덱스는 0부터 시작한다. 그러므로 int[] ar = new int[10]; 구문의 경우 ar 배열의 가장 마지막 원소는 ar[9]이다.

7.
"IS A STRING."

8.
ushort 형식을 byte 형식으로 암시적 변환할 수 없다. byte b = s; 구문을 byte b = (byte)s; 구문 또는 byte b = Convert.ToByte(s); 구문으로 수정해야 한다.

9.
* 배열은 정해진 하나의 데이터 형식만을 저장할 수 있지만 컬렉션은 object 형식으로 데이터를 저장하기 때문에 여러 형식의 데이터를 다양하게 저장할 수 있다.
* 배열은 기본적으로 사이즈를 한번 정하면 변경할 수 없지만 컬렉션은 사이즈를 동적으로 변경할 수 있다.
* 배열은 다차원 구조가 가능하지만 컬렉션은 기본적으로 1차원 구조만 가능하다. 하지만 컬렉션에 또 다른 컬렉션을 저장하는 방식을 사용하면 다차원 구조를 흉내 낼 수 있다.

10.
컬렉션은 다양한 형식의 데이터를 저장할 수 있기 때문에 데이터 형식의 안전성을 보장 받을 수 없어 프로그램 실행 도중 형식 변환 예외가 발생할 가능성이 있다. 또한 컬렉션은 값을 object 형식으로 변환하여 저장하기 때문에 어떤 데이터 형식이든 쉽게 입력할 수 있어 편하긴 하지만 값을 저장할 때 object 형식으로 변환하고, 또 꺼내올 때 다시 기존의 데이터 형식으로 변환하기 때문에 잦은 형식 변환 작업으로 인해 성능을 떨어뜨릴 수 있다.

11.
제네릭(generics)은 일반화 프로그래밍에 사용되는 기능으로서 주로 클래스나 메서드에 적용하게 되는데 제네릭이 적용된 클래스나 메서드는 관련 데이터 형식을 미리 지정하지 않고 해당 클래스나 메서드를 사용할 때 관련 데이터 형식을 지정하게 된다. 제네릭 컬렉션은 지정한 데이터 형식만 입력할 수 있으므로 데이터 형식의 안전성을 보장 받을 수 있고 형식 변환 작업이 필요 없으므로 성능에도 큰 무리가 없다. 그러므로 제네릭 컬렉션을 사용하면 기존의 컬렉션이 가졌던 문제점들을 모두 해소할 수 있다.



<4장>

1.
1) HTML(HyperText Markup Language)은 하이퍼텍스트로 구성되는 웹 페이지를 태그라는 마크업으로 작성할 때 사용하는 마크업 언어이다.
2) XHTML5는 XML로도 해석될 수 있는 HTML5 즉, HTML5에 대한 다중언어 마크업이다.
3) 여는 태그, 닫는 태그 그리고 이들 태그 사이에 있는 내용을 모두 합쳐 요소(element)라고 한다.
4) 웹 폼(Web Form)은 개발자가 동적 웹 페이지를 쉽게 구현할 수 있도록 웹 페이지(web page)의 일반적인 특성과 행동양식을 미리 설계하여 만들어 둔 ASP.NET의 특수한 웹 페이지로서 ASP.NET 개발 프레임워크 중의 하나인 웹 폼(Web Forms) 방식의 기반이 된다.
5) 다시 게시(postback)는 동일한 웹 페이지를 POST 방식으로 다시 재요청하는 요청 방식을 말한다.
6) 단일 파일 페이지 모델은 웹 폼의 시각적인 부분을 처리하는 '표현 부분'과 웹 폼의 내부 로직을 처리하는 '코드 부분'을 하나의 웹 폼 파일(.aspx)에 두는 것이고, 코드 숨김 페이지 모델은 '표현 부분'과 '코드 부분'을 서로 다른 웹 폼 파일(.aspx, .cs)에 두는 것이다.
7) 이벤트(event)는 개체가 자신과 관련된 동작이 발생 했음을 알리는 신호이다. 이벤트 처리기(event handler)는 이벤트가 발생했을 때 해당 이벤트를 처리하기 위해 실행되는 메서드이다.

2.
* 태그명과 특성명은 모두 소문자로 작성해야 한다.
* 특성의 값은 반드시 큰따옴표("")로 감싸야 한다.
* 단독 태그를 제외한 모든 태그는 여는 태그와 함께 닫는 태그를 반드시 명시해야 한다.
* 단독 태그는 <br />과 같이 반드시 태그명 다음에 슬래시(/)를 명시해야 한다.

3.
PreInit, Load, 서버 컨트롤 이벤트, Unload

4.
IsPostBack 속성



<5장>

1.
1) Visual Studio는 코딩, 디버그, 컴파일, 테스트 등 응용 프로그램 개발과 관련된 모든 작업을 할 수 있는 IDE 개발 도구이다.
2) Visual Studio에서 응용 프로그램 또는 응용 프로그램을 구성하는 컴포넌트를 관리할 때 사용하는 단위를 프로젝트(project)라고 하며 프로젝트가 여러 개 모인 집합을 솔루션(solution)이라고 한다.
3) 솔루션에 포함되어 있는 웹 응용 프로그램을 가리켜 특별히 '웹 프로젝트'라고 한다.
4) 어셈블리(assembly)는 컴파일 후에 생성되는 결과물 파일로서 .NET 플랫폼에서 실행 또는 배포 가능한 최소 단위이다.
5) 디버깅(debugging)은 프로그램의 버그(오류)를 찾아서 수정하는 행위를 말한다.
6) 크로스 브라우징(cross browsing)은 웹 페이지가 다양한 웹 브라우저에서 동일하게 보이고 또 동작하도록 만드는 것을 말한다.

2.
웹 사이트 프로젝트, 웹 응용 프로그램 프로젝트

3.
* 주석 처리 : Ctrl + K, C
* 주석 해제 : Ctrl + K, U



<6장>

1.
1) <input type="hidden" /> 요소
2) <span> 요소
3) <a> 요소
4) <div> 요소
5) <table> 요소
6) <input type="text" /> 요소

2.
~ 연산자는 웹 응용 프로그램 루트를 가리키는 연산자로서 클라이언트 측 구성 요소에서는 인식될 수 없고 서버 컨트롤과 같은 서버 측 구성 요소에서만 인식된다. 그러므로 클라이언트 측 구성 요소인 <img /> 요소에서 ~ 연산자를 사용하면 해당 경로에 있는 이미지가 제대로 표시되지 않는다.

3.
(1) CheckBoxList1.Items.Count
(2) CheckBoxList1.Items[i].Selected

4.
예제 소스 코드의 \Chap6\Ex6-4.aspx 파일 참고.



<7장>

1. 
1) 데이터베이스(database)는 여러 사용자에 의해 공유되어 사용될 목적으로 통합 관리되는 구조화된 데이터의 집합체이다.
2) 관계형 데이터베이스(relational database)는 데이터를 관계형 데이터 모델에 기반하여 행과 열로 된 2차원의 테이블로 표현한 데이터베이스이다.
3) 데이터베이스 관리 시스템(database management system)은 말 그대로 데이터베이스를 관리해주는 시스템(소프트웨어)으로서 여러 사용자들이 동시에 데이터베이스에 접근할 수 있도록 해주고 데이터를 쉽고 빠르게 입력, 조회, 수정 및 삭제할 수 있도록 도와준다.
4) 기본 키(primary key)는 테이블 내에 있는 정보들을 유일하게 식별할 수 있도록 해주는 키(key)가 되는 열을 말한다.
5) 외래 키(foreign key)는 부모 테이블의 기본 키와 연결되는 자식 테이블의 열을 말한다.
6) SQL(Structured Query Language)은 사용자가 데이터베이스 관리 시스템(DBMS)과 의사소통을 할 때 사용하는 프로그래밍 언어이다.
7) 테이블(개체) 간의 관계를 나타낸 다이어그램을 개체 관계도(Entity Relationship Diagram) 또는 간단히 ERD라고 한다.
8) 저장 프로시저(stored procedure)는 일련의 SQL 구문을 마치 하나의 함수처럼 실행하기 위해 만들어 둔 SQL 구문의 집합이다.
9) 트랜잭션(transaction)은 더 이상 쪼갤 수 없는 즉, 하나로 묶여진 프로세스(조회, 입력, 수정, 삭제) 처리 단위를 말하는 것으로서 묶여진 프로세스가 모두 성공하거나 아니면 모두 실패하는 둘 중의 하나의 경우로만 처리되는 특징을 가진다.

2.
1) 생략
2) 생략
3)	
INSERT INTO MemberDetail(UserID, Birthday, Address)
VALUES('aaaa', '2000-01-01', '서울시 동작구 사당동 1234')
4)	
CREATE PROCEDURE usp_SelectMemberDetailByUserID
@UserID varchar(30)
AS
BEGIN
	SELECT M.UserID, M.Name, M.Phone, D.Birthday, D.Address
	FROM Member M INNER JOIN MemberDetail D
	ON M.UserID = D.UserID
	WHERE M.UserID = @UserID
END

3.
성능 향상, 보안 강화, 네트워크 전송량 감소, 모듈식 프로그래밍

4.
BEGIN TRANSACTION, COMMIT, ROLLBACK



<8장>

1.
ADO.NET은 .NET Framework에 포함되어 있는 데이터 액세스 관련 클래스 집합으로서 모든 .NET 응용 프로그램은 ADO.NET을 사용하여 데이터베이스와 연동할 수 있다. ADO.NET에서는 '연결기반 데이터베이스 연동 방식'과 '비연결기반 데이터베이스 연동 방식'을 사용할 수 있는데 연결기반 데이터베이스 연동은 ADO.NET이 데이터 관련 작업을 할 때 데이터베이스와 연결 상태를 계속 유지하는 연동 방식을 말하며, 비연결기반 데이터베이스 연동은 ADO.NET이 데이터베이스와 연결 상태를 계속 유지하지 않더라도 DataSet이라는 가상의 데이터베이스를 통해 데이터 관련 작업을 계속할 수 있도록 하는 연동 방식을 말한다.

2.
데이터 바인딩 컨트롤은 데이터를 바인딩하여 웹 페이지에 데이터를 렌더링(표현)해주는 서버 컨트롤이고, 데이터 소스 컨트롤은 데이터를 저장하고 있는 데이터 소스(데이터베이스, XML 문서, 개체 등등)에 연결하여 데이터의 조회, 입력, 수정, 삭제 작업을 자동으로 관리해주는 서버 컨트롤이다.

3.
1) 예제 소스 코드의 \Chap8\Ex8-3-1.aspx 파일 참고.
2) 예제 소스 코드의 \Chap8\Ex8-3-2.aspx 파일 참고.



<9장>

1.
1) Path 클래스는 파일과 디렉터리의 경로(path) 정보를 다루기 위한 정적 메서드를 제공하는 클래스이다.
2) File 클래스는 파일의 생성, 복사, 삭제, 이동, 열기 등의 작업을 하기 위한 정적 메서드를 제공하는 클래스이다.
3) FileInfo 클래스는 File 클래스와 하는 일은 거의 동일하지만 정적 메서드 대신 인스턴스 메서드와 인스턴스 속성을 제공하는 클래스이다.
4) Directory 클래스는 디렉터리의 생성, 삭제, 이동, 조회 등의 작업을 하기 위한 정적 메서드를 제공하는 클래스이다.
5) DirectoryInfo 클래스는 Directory 클래스와 하는 일은 거의 동일하지만 정적 메서드 대신 인스턴스 메서드와 인스턴스 속성을 제공하는 클래스이다.

2.
스트림(stream)은 연속적이고 논리적인 데이터의 흐름 또는 통로로서 시작과 끝이 있는 1차원의 선으로 표현된다. 스트림을 사용하면 다양한 입력 기기 또는 출력 기기를 통해 데이터를 읽거나 쓸 수 있다.

3.
sw.Close()



<10장>

1.
마스터 페이지(Master Page)는 페이지 레이아웃을 정의하는 페이지로서 .master 확장자를 가진다. 여기서 '페이지 레이아웃(page layout)'은 웹 페이지 안에 포함되어 있는 콘텐츠(내용)를 효과적으로 정리하고 배치하는 일 또는 배치 그 자체를 의미한다. 콘텐츠 페이지(Contents Page)는 콘텐츠가 작성되는 .aspx 페이지로서 마스터 페이지와 결합된다. 사용자 정의 컨트롤(User Control)은 웹 페이지 내에서 공통적으로 사용되는 부분을 재사용 가능하도록 하나의 모듈로 만들어주는 서버 컨트롤이다.

2.
사용자 정의 컨트롤은 페이지 레이아웃의 공통된 구성 영역을 정의할 순 있지만 구성 영역의 구조(위치)까지 정의하는 데에는 한계가 있다. 하지만 마스터 페이지는 페이지 레이아웃의 공통된 구성 영역과 구성 영역의 구조(위치)를 모두 정의할 수 있기 때문에 차후에 페이지 레이아웃이 변경되어야 할 때 효율적으로 대처할 수 있다.

3.
(1) uc1
(2) MyTopMenu

4.
MasterPageFile



<11장>

1.
사이트 탐색(Site Navigation)은 탐색 링크를 손쉽게 구현할 수 있도록 해주는 ASP.NET의 기능이다. 사이트 탐색은 사이트 맵 공급자, 사이트 맵 API, 탐색 서버 컨트롤 등으로 구성되며 특히 탐색 서버 컨트롤은 탐색 링크를 표현할 때 사용하는 서버 컨트롤로서 총 세 개의 탐색 서버 컨트롤(Menu, SiteMapPath, TreeView)이 제공된다.

2.
Menu 컨트롤은 정적 또는 동적으로 표시되는 메뉴를 표현할 때 사용하는 컨트롤이다. SiteMapPath 컨트롤은 탐색 경로를 표현할 때 사용하는 컨트롤이다. TreeView 컨트롤은 계층적 데이터를 트리 구조로 표현할 때 사용하는 컨트롤이다.

3.
공급자(provider)는 서비스와 데이터 소스 사이에서 일관성 있는 인터페이스를 제공하는 소프트웨어 모듈이다. 공급자를 사용하면 차후에 데이터 소스가 바뀌어야 할 때 프레젠테이션 계층(웹 폼)이나 로직 계층(비즈니스 로직)은 건드릴 필요 없이 해당 데이터 소스를 위한 공급자만 바꿔주면 되므로 시스템의 유연성을 높일 수 있다.

4. 
<asp:TreeView ID="TreeView1" runat="server" DataSourceID="SiteMapDataSource1">
</asp:TreeView>



<12장>

1.
CSS(Cascading Style Sheets)는 웹 페이지의 스타일을 정의할 때 사용하는 언어이다. CSS에서 스타일은 'CSS 규칙(CSS rule)'을 통해 작성되며 CSS 규칙은 선택자(selector)와 선언부(declaration)로 구성된다. 선택자는 스타일이 적용될 대상(요소)을 지칭하는 역할을 하고, 선언부는 실제로 스타일을 선언하는 역할을 한다. 또한 선언부는 속성(property)과 값(value)으로 구성된다. 속성은 적용할 세부 스타일을 의미하고, 값은 해당 세부 스타일에 적용될 값을 의미한다. 선언부는 중괄호({}) 안에서 여러 개가 선언될 수 있는데 이때 각각의 선언부는 세미콜론(;)으로 구분된다.

2.
클래스 선택자는 '여러 요소를' 지칭할 수 있는 반면에 아이디 선택자는 '단 하나의 요소만을' 지칭할 수 있다. 자식 선택자는 특정 요소 '바로 하위 수준에 있는' 특정 자식 요소들을 지칭하는 반면에 하위 선택자는 특정 요소 '하위에 포함되어 있는 모든' 특정 자식 요소들을 지칭한다.

3.
인라인 스타일, 내부 CSS, 외부 CSS. 인라인 스타일은 style 특성을 사용하여 특정 요소에 스타일을 바로 적용하는 방식이다. 내부 CSS는 웹 페이지 내에 <style> 요소를 두어 스타일을 정의하는 방식이다. 외부 CSS는 .css 확장자를 가지는 CSS 파일에 스타일을 정의하는 방식이다.

4.
blue, #0000ff, rgb(0,0,255), rgb(0,0,100%)

5.
CSS의 상자 모델(box model)은 모든 요소를 하나의 사각형 영역으로 간주하여 공간을 조정하는 개념이다. 공백(padding)은 요소 안의 콘텐츠와 테두리(border) 사이의 공간을 말하고 여백(margin)은 테두리 바깥쪽 공간을 말한다.

6.
블록 단위 요소(block-level element)는 width와 height의 설정이 가능하고 자동으로 개행이 되는 특징을 가지는 요소들을 말한다. 블록 단위 요소에 width를 따로 지정하지 않으면 width가 자동으로 100%로 적용된다. 인라인 요소(inline element)는 width와 height를 설정할 수 없고 자동으로 개행이 되지 않는 특징을 가지는 요소들을 말한다.

7.
일반 흐름(normal flow) 방식, 절대 위치(absolute positioning) 방식, 플로트(float) 방식. 일반 흐름 방식은 모든 요소들이 정해진 약속에 따라 순서대로 위치가 지정되는 방식이다. 절대 위치 방식은 '일반 흐름 방식'에서 벗어나 해당 요소의 위치를 절대값으로 지정하는 방식이다. 플로트 방식은 '일반 흐름 방식'에서 벗어나 해당 요소를 최대한 좌측 또는 우측으로 위치 시키는 방식이다.

8.
static, relative, absolute, fixed

9.
p {
    border: 1px solid #000000;
    width: 60px; height: 60px;
}

.one {
    float: right;
}

.two {
    float: right;
}

.three {
    clear: right;
}



<13장>

1.
테마(Theme)는 웹 응용 프로그램의 전체적인 스타일을 일관성 있게 관리해주는 ASP.NET의 기능이다. 테마는 'App_Themes'라는 특수 폴더 하위에 정의되며 'App_Themes' 폴더 하위에는 여러 개의 테마가 폴더 형식으로 정의될 수 있다. 테마는 주로 이미지 파일, 스킨 파일, CSS 파일을 포함한다.

2.
SkinID 속성이 지정되지 않은 스킨을 '기본 스킨(default skin)'이라 하고 SkinID 속성이 지정된 스킨을 '명명된 스킨(named skin)'이라 하는데 한 테마 안에서 기본 스킨은 각 서버 컨트롤 별로 하나씩만 존재할 수 있고 명명된 스킨은 여러 개가 존재할 수 있다.

3.
Theme 특성은 테마에 정의된 스킨 설정과 서버 컨트롤에 지정된 스타일 설정이 충돌할 경우 테마에 정의된 스킨 설정을 우선시하는 특성인 반면에 StyleSheetTheme 특성은 테마에 정의된 스킨 설정과 서버 컨트롤에 지정된 스타일 설정이 충돌할 경우 서버 컨트롤에 지정된 스타일 설정을 우선시하는 특성이다.

4.
EnableTheming="false"

5.
Page.Theme



<14장>

1.
인증(authentication)은 해당 사용자가 유효한 사용자인지를 판단하는 과정이고, 권한 부여(authorization)는 웹 사이트에서 제공하는 콘텐츠(정보 또는 기능)에 해당 사용자가 접근 가능한지를 판단하는 과정이다.

2.
<authentication mode="Forms"/>

3.
(1) <allow users="admin"/>
(2) <deny users="*"/>



<15장>

1.
멤버 자격(Membership)은 인증과 관련된 프로세스를 자동으로 처리해주는 서비스로서 로그인 컨트롤, 멤버 자격 API, 멤버 자격 공급자가 서로 유기적으로 동작하도록 설계되어 있다.

2.
Hash된 암호는 검색할 수 없으므로 암호 형식(passwordFormat)을 다르게 지정하거나 enablePasswordRetrieval 특성을 false로 지정해야 한다.

3.
aspnet_Users, aspnet_Membership 테이블

4.
aspnet_regsql.exe

5.
역할 관리자(Role Manager)는 역할 관리 프로세스를 자동으로 처리해주는 서비스로서 역할 관리 API와 역할 공급자가 서로 유기적으로 동작하도록 설계되어 있다.

6.
<allow roles="Administrators"/>



<16장>

1.
응용 프로그램의 기능을 개인의 기호에 따라 설정하는 것을 '개인 설정(personalization)'이라고 한다. '프로필(Profiles)'은 웹 응용 프로그램의 개인 설정을 위해 사용자의 고유한 설정 정보를 저장하고 관리해주는 ASP.NET의 기능이다.

2.
aspnet_Profile

3.
<add name="MainBackColor" allowAnonymous="true"/>

4.
Profile_MigrateAnonymous() 이벤트 처리기



<17장>

1.
2) JavaScript는 인터프리터에 의해 바로 해석되는 인터프리터 언어이다.
4) JavaScript와 Java는 서로 다른 별개의 언어이다.

2.
2) -(하이픈)과 같은 특수 문자는 변수명으로 사용될 수 없다.
3) function은 키워드(예약어)이므로 변수명으로 사용될 수 없다.

3.
null은 아무런 값도 없음을 나타내는 특수한 값이다. undefined는 변수가 선언은 되었지만 값이 할당되지 않았거나 아예 해당 객체가 존재하지 않음을 나타내는 특수한 값이다. Infinity는 무한수를 나타내는 특수한 값이다. NaN은 'Not a Number'의 약자로서 숫자가 아님을 나타내는 특수한 값이다.

4.
1) true, 2) true, 3) false, 4) false

5.
alert(), blur(), clearInterval(), clearTimeout(), close(), confirm(), focus(), moveBy(), moveTo(), open(), print(), prompt(), setInterval(), setTimeout()

6.
HTML DOM은 HTML 문서에 대한 객체 모델이다. 즉, HTML DOM은 HTML 문서를 제어하기 위해 HTML 문서 자체를 객체로 정의해 놓은 것이다. HTML DOM을 사용하면 HTML 문서를 구성하고 있는 요소, 특성, 내용 등을 손쉽게 제어할 수 있는데 예를 들어 특정 요소에 접근하여 해당 요소의 특성, 내용 등을 변경할 수도 있고 새로운 요소를 추가하거나 기존의 요소를 삭제할 수도 있다.

7.
<input type="text" id="t1" onchange="this.value = this.value.toUpperCase();" />

8.
<asp:Button ID="B1" runat="server" Text="OK" OnClientClick="return validateInput()"/>

9.
RegisterClientScriptBlock() 메서드를 통해 등록한 스크립트는 웹 페이지의 본문을 나타내는 요소들 보다 이전에 렌더링되지만 RegisterStartupScript() 메서드를 통해 등록한 스크립트는 웹 페이지의 본문을 나타내는 요소들 보다 이후에 렌더링된다.

10.
ClientID 속성은 서버 컨트롤이 렌더링될 때 갖게 될 id를 반환하는 속성이다. ClientIDMode 속성은 ClientID 속성 값을 생성하는 방법에 대한 알고리즘을 지정하거나 반환하는 속성으로서 AutoID, Predictable, Static 및 Inherit 값을 지정할 수 있다.

11.
교차 사이트 스크립팅(Cross-Site Scripting)은 일반 사용자가 웹 페이지에 악성 스크립트를 삽입할 수 있는 취약성을 말하는 것으로서 이러한 취약성을 이용하면 해커가 사용자의 정보(쿠키, 세션 등)를 가로채거나 웹 사이트를 악의적으로 조작할 수 있다. 교차 사이트 스크립팅은 사이트 간 스크립팅이라고도 하며 영문 약어로 XSS라고 한다.



<18장>

1.
jQuery는 JavaScript 라이브러리로서 JavaScript를 좀 더 쉽게 사용할 수 있도록 JavaScript와 관련된 유용한 기능들을 모아둔 집합을 말한다. 플러그인은 jQuery의 기능을 확장하여 만든 새로운 메서드를 말한다. jQuery UI는 사용자 인터페이스(UI)와 관련된 다양한 기능들을 제공해주는 플러그인이다.

2.
CDN(Content Delivery Network)은 콘텐츠 전송 네트워크로서 콘텐츠를 캐시 서버에 저장해 두었다가 수요가 있을 때 콘텐츠를 빠른 속도로 사용자에게 전달하는 시스템이다. CDN을 사용해서 얻는 가장 큰 이점은 바로 로딩 속도 향상이다. 잘 알려진 CDN의 경우 이미 많은 사용자들이 해당 CDN을 통해 리소스를 다운로드 받아 놓은 상태이므로 첫 방문 시에도 좀 더 높은 웹 페이지 로딩 속도를 기대할 수 있다. 또한 사용자가 CDN에 있는 파일을 요청하면 CDN은 해당 사용자와 가장 가까이에 있는 서버를 통해 파일을 전송해주기 때문에 CDN을 사용하는 것 자체만으로도 로딩 속도의 향상을 기대할 수 있다.

3.
(1) :text
(2) focus 또는 focusIn
(3) this

4.
$("div").animate({ height: "300px" });
$("div").queue(
    function () {
        $(this).css("background-color", "red");
        $(this).dequeue();
    }
).delay(2000);
$("div").animate({ width: "300px" });

5.
예제 소스 코드의 \Chap18\Ex18-5.html 파일 참고.


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
    </script>
    <script type="text/javascript">
    //<![CDATA[
        $(document).ready(function () {
            $("#btnOK").click(function () {
                var myFruit = $(":checkbox:checked").map(function () {
                    return $(this).val();
                })
                .get()
                .join();

                alert(myFruit);
            });
        });
    //]]>
    </script>
</head>
<body>
    <label for="chkApple">Apple</label>
    <input type="checkbox" id="chkApple" value="Apple"/>&nbsp;&nbsp;&nbsp;
    <label for="chkBanana">Banana</label>
    <input type="checkbox" id="chkBanana" value="Banana"/>&nbsp;&nbsp;&nbsp;
    <label for="chkOrange">Orange</label>
    <input type="checkbox" id="chkOrange" value="Orange"/>&nbsp;&nbsp;&nbsp;
    <label for="chkMelon">Melon</label>
    <input type="checkbox" id="chkMelon" value="Melon"/>&nbsp;&nbsp;&nbsp;
    <input type="button" id="btnOK" value="확인" />
</body>
</html>

6.
Ajax는 'Asynchronous JavaScript and XML'의 약자로서 웹 서버와 비동기적으로 데이터 통신을 할 때 사용하는 웹 개발 기법을 말한다.

7.
GET 방식은 웹 서버에 있는 정보의 조회를 요청할 때 사용하는 방식이고, POST 방식은 웹 서버에서 처리될 정보의 전송을 요청할 때 사용하는 방식이다. GET 방식은 즐겨찾기에 추가되고 요청이 캐시되며 전송된 데이터가 방문 기록에 남으므로 '정보의 조회'에는 적합하지만, 웹 서버로 전송되는 데이터의 길이와 형식에 제한이 있고 보안에도 취약하므로 '정보의 전송'에는 적합하지 않다. 반면에 POST 방식은 웹 서버로 전송되는 데이터의 길이 및 형식에 제한이 없고 GET 방식에 비해 보안에 안전한 편이므로 '정보의 전송'에는 적합하지만, 웹 서버로 전송된 데이터(정보 조회에 필요한 데이터)가 방문기록에 남지 않고 즐겨찾기에도 추가되지 않으므로 '정보의 조회'에는 적합하지 않다.

8.
JSON(JavaScript Object Notation)은 경량의 데이터 교환 형식이다. JSON 객체의 경우 property:value 쌍에서 property 부분을 반드시 큰따옴표(")로 감싸야 하는데 { userName: "홍길동" } 구문은 property 부분인 userName을 큰따옴표로 감싸지 않았으므로 JSON 형식에 부합하지 않는다.



<19장>

1.
ASP.NET AJAX는 ASP.NET에서 Ajax를 손쉽게 사용할 수 있도록 지원하기 위해 개발된 프레임워크이다. ASP.NET AJAX 컨트롤 툴킷은 ASP.NET AJAX를 기반으로 하여 만든 사용자 인터페이스(UI) 관련 기능들의 집합이다.

2.
ScriptManager, UpdatePanel, UpdateProgress, Timer, ScriptManagerProxy

3.
ScriptManager 컨트롤은 다른 ASP.NET AJAX 서버 컨트롤보다 먼저 선언되어 있어야 하는데 여기서는 ScriptManager 컨트롤이 UpdatePanel 컨트롤 뒤에 선언되어 있으므로 오류가 발생한다.

4.
Always, Conditional



<20장>

1.
상태 관리는 웹 페이지 요청 과정에서 저장 유지되어야 할 상태 정보를 관리하는 프로세스이다. 상태 관리가 필요한 이유는 HTTP와 웹 응용 프로그램의 상태 비저장 특성 때문이다. 즉, HTTP는 요청 과정에서 전달된 상태 정보를 따로 저장하지 않고, 웹 응용 프로그램은 웹 페이지 요청이 들어올 때마다 새로운 웹 페이지 개체(인스턴스)를 만들고 소멸시키는데 이때 해당 웹 페이지 및 각종 컨트롤과 관련된 모든 정보도 함께 소멸되므로 상태 관리가 필요하다.

2.
* 클라이언트 측 상태 관리 옵션
- 숨겨진 필드
- 뷰 상태
- 컨트롤 상태
- 쿠키
- 쿼리 문자열

* 서버 측 상태 관리 옵션
- 응용 프로그램 상태
- 세션 상태
- 프로필 속성
- 데이터베이스

3.
클라이언트 측 상태 관리 옵션은 상태 정보를 저장할 때 서버 리소스를 사용하지 않으므로 서버를 가볍게 하여 부하를 줄이고 서버의 수행 속도를 빠르게 할 수 있다. 하지만 상태 정보를 클라이언트 측에 저장하기 때문에 보안에 취약하며(클라이언트 측에서 훼손 될 수 있음), 저장할 수 있는 정보의 양이 제한적이다. 서버 측 상태 관리 옵션은 클라이언트 측 상태 관리 옵션에 비해 보안이 뛰어나고 데이터베이스를 사용할 경우 많은 양의 데이터를 영구적으로 저장할 수 있지만, 서버 리소스를 사용하므로 많은 양의 정보를 한번에 다룰 경우 서버에 부하를 줄 수 있다.

4.
숨겨진 필드는 정보를 있는 그대로 저장하는 반면에 뷰 상태는 정보를 인코딩하여 저장한다.

5.
세션(session)은 사용자 간 또는 컴퓨터 간의 통신을 위해 형성된 논리적인 연결을 의미한다.

6.
In-Process, State Server, SQL Server, 사용자 지정, Off



<21장>

1.
캐싱(caching)은 이미 처리된 데이터를 캐시(cache)에 넣는 행위 또는 기법을 말하는 것으로서 캐싱을 사용하면 데이터 처리 과정을 생략할 수 있으므로 응용 프로그램의 성능을 향상시킬 수 있다.

2.
<%@ OutputCache Duration="30" VaryByParam="none" %>

3.
Cache 개체



<22장>

1.
(x, y) => x + y

2.
bool

3.
익명 형식의 개체(new { Name = "홍길동", Score = 2 })를 받는 변수는 var 키워드로 선언되어야 한다. 그러므로 var myStudent = new { Name = "홍길동", Score = 2 }; 구문과 같이 수정하거나 아예 형식을 명확히 지정하여 Student myStudent = new Student { Name = "홍길동", Score = 2 }; 구문과 같이 수정해야 한다.

4.
numbers
    .Where(n => n > 5)
    .OrderBy(n => n)
    .Select(n => new { Number = n, SquareNumber = n * n });

5.
context.SaveChanges();



<23장>

1. 
ASP.NET Identity는 기존의 멤버 자격(Membership)을 대체하는 새로운 ASP.NET의 보안 시스템이다. 즉, ASP.NET Identity는 기존의 멤버 자격이 제공했던 사용자 생성, 로그인 등 인증과 관련된 프로세스를 자동으로 처리해주는 서비스는 물론이고 기존의 멤버 자격이 가졌던 여러 단점들을 개선한 새로운 보안 시스템이다.

2.
- ASP.NET Identity는 Web Forms, MVC, Web Pages, Web API 등 모든 ASP.NET 프레임워크에서 사용할 수 있다.
- ASP.NET Identity에서는 사용자 정보를 저장하는 DB의 스키마(구조)를 임의로 컨트롤할 수 있기 때문에 다양한 사용자 정보를 입력할 수 있다.
- ASP.NET Identity는 단위 테스트를 좀 더 쉽게 할 수 있도록 해준다.
- ASP.NET Identity는 클레임 기반(claims-based)의 인증을 제공한다. 클레임은 다양한 사용자 정보를 포함하며 개발자로 하여금 사용자의 identity를 좀 더 다양하게 표현할 수 있도록 해준다.
- ASP.NET Identity는 SQL Server 외에도 SharePoint, Windows Azure Storage Table Service, NoSQL 등 다양한 저장 메커니즘과도 쉽게 연동하여 사용할 수 있다.
- ASP.NET Identity는 마이크로소프트, 구글, 페이스북, 트위터 등의 외부 계정을 통해서도 웹 응용 프로그램에 로그인할 수 있도록 해준다.
- ASP.NET Identity는 NuGet을 통해 배포되므로 새로운 기능이 추가되거나 버그가 수정된 최신 버전의 ASP.NET Identity를 빠르게 제공받을 수 있다.



<24장>

1.
3) IIS Express는 로컬 컴퓨터에서 들어오는 요청만 처리할 수 있는 말 그대로 개발용 웹 서버이다. 그러므로 네트워크 상에 있는 다른 컴퓨터 또는 인터넷 상에 있는 다른 사용자의 컴퓨터로부터 들어오는 요청을 처리하려면 IIS Express가 아닌 Full 버전의 IIS를 사용해야 한다.
6) 웹 사이트 복사 도구는 단순히 개발 환경에 있는 웹 응용 프로그램과 운영 환경에 있는 IIS 간에 파일을 복사 및 동기화할 때 사용하는 도구이며, 미리 컴파일 기능을 사용하려면 웹 사이트 게시 도구를 사용해야 한다.

2. 
디버깅 기능을 사용하면 응용 프로그램을 자세히 분석할 수 있는 이점이 있지만 디버깅 기능의 추가적인 프로세스로 인해 웹 서버의 메모리/성능 오버헤드가 발생할 수 있는 단점도 있다. 그러므로 디버깅 기능은 개발 환경에서 응용 프로그램을 개발할 때에만 사용을 해야 하고 응용 프로그램을 운영 환경으로 배포할 때에는 이 디버깅 기능을 비활성화시켜야 한다.

3.
- Web.config 파일 및 코드 파일에 포함되어 있는 오류를 컴파일 시점에서 확인할 수 있다.
- 소스 코드를 어셈블리(.dll) 형식으로 만들 수 있으므로 다른 사용자가 소스 코드를 볼 수 없게 하여 지적 재산권을 보호할 수 있다.
- 사용자에 의해 웹 페이지가 처음 요청되더라도 컴파일 작업이 일어나지 않으므로 웹 페이지에 대한 초기 응답 시간을 줄일 수 있다.



<25장>

1.
Microsoft.AspNet.FriendlyUrls 패키지

2.
Bundling을 통해 리소스의 요청 횟수를 줄일 수 있고, Minification을 통해 리소스의 용량을 줄일 수 있다.

3.
Bootstrap은 반응형 웹 디자인을 할 때 사용하는 프레임워크로서 트위터에서 제공하고 있다. 여기서 ‘반응형 웹 디자인(responsive web design)’이란 데스크톱, 테블릿 PC, 모바일폰 등 화면 크기가 다양한 여러 종류의 기기에서도 읽기 쉽고 사용하기 쉬운 웹 페이지를 만들기 위한 웹 디자인 방법을 말한다.

4.
#endregion

